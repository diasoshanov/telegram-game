// –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏–≥—Ä—ã "Programming Match-3" —Å Telegram Bot
// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –≤–∞—à–µ–º Telegram Bot –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã

const TelegramBot = require('node-telegram-bot-api');
const bot = new TelegramBot('YOUR_BOT_TOKEN', { polling: true });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
const gameResults = [];

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const keyboard = {
        inline_keyboard: [[
            {
                text: "üéÆ –ò–≥—Ä–∞—Ç—å –≤ Programming Match-3",
                web_app: { url: "https://your-domain.com/programming-match3-game" }
            }
        ]]
    };
    
    bot.sendMessage(chatId, 
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É Programming Match-3! üöÄ\n\n" +
        "üéØ –¶–µ–ª—å: –°–æ–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ –∑–∞ 2 –º–∏–Ω—É—Ç—ã\n" +
        "üéÆ –ú–µ—Ö–∞–Ω–∏–∫–∞: –°–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –ª–∏–Ω–∏–∏ –∏–∑ 3+ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∏–∫–æ–Ω–æ–∫ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n" +
        "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º–∏ –æ—á–∫–∞–º–∏\n\n" +
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!",
        { reply_markup: keyboard }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
bot.on('web_app_data', (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const userName = msg.from.first_name || msg.from.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫';
    
    try {
        const gameResult = JSON.parse(msg.web_app_data.data);
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const result = {
            userId: userId,
            userName: userName,
            score: gameResult.score,
            time: gameResult.time,
            level: gameResult.level,
            timestamp: new Date()
        };
        
        gameResults.push(result);
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ—á–∫–∞–º (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        gameResults.sort((a, b) => b.score - a.score);
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
        const playerPosition = gameResults.findIndex(r => r.userId === userId) + 1;
        
        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        let message = `üéÆ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã: ${userName}\n\n`;
        message += `üèÜ –û—á–∫–∏: ${gameResult.score}\n`;
        message += `‚è±Ô∏è –í—Ä–µ–º—è: ${gameResult.time}\n`;
        message += `üìà –£—Ä–æ–≤–µ–Ω—å: ${gameResult.level}\n`;
        message += `üèÖ –ü–æ–∑–∏—Ü–∏—è: ${playerPosition}\n\n`;
        
        // –ü–æ–∫–∞–∑ —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤
        message += "üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:\n";
        const top10 = gameResults.slice(0, 10);
        top10.forEach((player, index) => {
            const medal = index === 0 ? "ü•á" : index === 1 ? "ü•à" : index === 2 ? "ü•â" : `${index + 1}.`;
            message += `${medal} ${player.userName}: ${player.score} –æ—á–∫–æ–≤\n`;
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–æ–ø-3
        if (playerPosition <= 3) {
            message += "\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤ —Ç–æ–ø-3!";
        } else if (playerPosition <= 10) {
            message += "\nüëç –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –≤ —Ç–æ–ø-10!";
        } else {
            message += "\nüí™ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø-10!";
        }
        
        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        const keyboard = {
            inline_keyboard: [[
                {
                    text: "üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞",
                    web_app: { url: "https://your-domain.com/programming-match3-game" }
                }
            ]]
        };
        
        bot.sendMessage(chatId, message, { reply_markup: keyboard });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã:', error);
        bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–ø-10
bot.onText(/\/top/, (msg) => {
    const chatId = msg.chat.id;
    
    if (gameResults.length === 0) {
        bot.sendMessage(chatId, "üìä –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º! üöÄ");
        return;
    }
    
    let message = "üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:\n\n";
    const top10 = gameResults.slice(0, 10);
    
    top10.forEach((player, index) => {
        const medal = index === 0 ? "ü•á" : index === 1 ? "ü•à" : index === 2 ? "ü•â" : `${index + 1}.`;
        const time = player.time || "N/A";
        message += `${medal} ${player.userName}\n`;
        message += `   –û—á–∫–∏: ${player.score} | –í—Ä–µ–º—è: ${time} | –£—Ä–æ–≤–µ–Ω—å: ${player.level}\n\n`;
    });
    
    const keyboard = {
        inline_keyboard: [[
            {
                text: "üéÆ –ò–≥—Ä–∞—Ç—å",
                web_app: { url: "https://your-domain.com/programming-match3-game" }
            }
        ]]
    };
    
    bot.sendMessage(chatId, message, { reply_markup: keyboard });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
bot.onText(/\/reset/, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    // const isAdmin = ADMIN_IDS.includes(userId);
    
    gameResults.length = 0; // –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    bot.sendMessage(chatId, "üóëÔ∏è –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä —Å–±—Ä–æ—à–µ–Ω—ã.");
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞ Telegram Bot:', error);
});

bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ polling:', error);
});

console.log('Telegram Bot –∑–∞–ø—É—â–µ–Ω...');

// –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö MongoDB
/*
const { MongoClient } = require('mongodb');

const uri = "mongodb://localhost:27017";
const client = new MongoClient(uri);

async function saveGameResult(result) {
    try {
        await client.connect();
        const database = client.db('gameDB');
        const collection = database.collection('gameResults');
        
        await collection.insertOne(result);
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', error);
    } finally {
        await client.close();
    }
}

async function getTopPlayers(limit = 10) {
    try {
        await client.connect();
        const database = client.db('gameDB');
        const collection = database.collection('gameResults');
        
        const topPlayers = await collection
            .find()
            .sort({ score: -1 })
            .limit(limit)
            .toArray();
            
        return topPlayers;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤:', error);
        return [];
    } finally {
        await client.close();
    }
}
*/

module.exports = bot; 